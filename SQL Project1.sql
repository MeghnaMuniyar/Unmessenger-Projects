CREATE DATABASE ORG;
USE ORG;
CREATE SCHEMA ECommerce_Sales_Tables;
CREATE TABLE ECommerce_Sales_Tables.Customers(
CustomerID INT PRIMARY KEY,
Name VARCHAR(255),
Email VARCHAR(255),
JoinDate DATE);

CREATE TABLE ECommerce_Sales_Tables.Products(
ProductID INT PRIMARY KEY,
Name VARCHAR(255),
Category VARCHAR(255),
Price DECIMAL(10, 2));

CREATE TABLE ECommerce_Sales_Tables.Orders(
OrderID INT PRIMARY KEY,
CustomerID INT,
OrderDate Date,
TotalAmount Decimal(10,2),
FOREIGN KEY (CUSTOMERID) REFERENCES Customers(CustomerID));

CREATE TABLE ECommerce_Sales_Tables.Orderdetails(
OrderDetailID INT PRIMARY KEY,
OrderID INT,
ProductID INT,
Quantity INT,
PricePerUnit DECIMAL(10, 2),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID));

USE ORG;
USE ecommerce_sales_tables;
INSERT INTO customers(CustomerID, Name, Email, JoinDate)
VALUES (1, 'John Doe', 'johndoe@example.com', '2020-01-10'),
(2, 'Jane Smith', 'janesmith@example.com', '2020-01-15'),
(3, 'Alice Johnson', 'alicejohnson@example.com', '2020-03-05'),
(4, 'John Johnson', 'johnjohnson@example.com', '2020-01-10'),
(5, 'Jane Johnson', 'janejohnson@example.com', '2020-01-05'),
(6, 'John Smith', 'johnsmith@example.com', '2020-03-05'),
(7, 'Jane Smith', 'janesmith@example.com', '2020-01-15'),
(8, 'Alice Doe', 'alicedoe@example.com', '2020-03-05'),
(9, 'Jane Doe', 'janedoe@example.com', '2020-03-10'),
(10, 'Smith Doe', 'smithdoe@example.com', '2020-03-05');
USE ORG;
USE ecommerce_sales_tables;
INSERT INTO Products (ProductID, Name, Category, Price) VALUES
(1, 'Laptop', 'Electronics', 999.99),
(2, 'Smartphone', 'Electronics', 499.99),
(3, 'Desk Lamp', 'Home Decor', 29.99),
(4, 'Mouse', 'Electronics', 399.99),
(5, 'Keyboard', 'Electronics', 699.99),
(6, 'Paper Weight', 'Home Decor', 29.99),
(7, 'Flower Vase', 'Home Decor', 899.99),
(8, 'Music Speaker', 'Electronics', 999.99),
(9, 'Sofa', 'Home Decor', 999.99),
(10, 'Floor Carpet', 'Home Decor', 499.99);
USE ORG;
USE ecommerce_sales_tables;
INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount)
VALUES (1, 1, '2020-02-15', 1499.98),
(2, 2, '2020-02-17', 499.99),
(3, 3, '2021-04-21', 399.99),
(4, 4, '2019-03-15', 78.99),
(5, 5, '2022-06-21', 488.99),
(6, 6, '2018-04-22', 599.99),
(7, 7, '2015-05-30', 399.99),
(8, 8, '2012-03-21', 699.99),
(9, 9, '2014-07-25', 299.99),
(10,10, '2013-08-27', 899.99);

USE ORG;
USE ecommerce_sales_tables;
INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity,PricePerUnit) VALUES
(1, 1, 1, 1, 999.99),
(2, 2, 2, 1, 499.99),
(3, 3, 3, 2, 399.99),
(4, 4, 4, 2, 499.99),
(5, 5, 5, 2, 699.99),
(6, 6, 6, 2, 899.99),
(7, 7, 7, 2, 199.99),
(8, 8, 8, 2, 299.99),
(9, 9, 9, 2, 799.99),
(10, 10, 10, 2, 499.99);

# 1. Basic Queries:
# 1.1. List all customers.
SELECT * FROM Customers;

# 1.2. Show all products in the 'Electronics' category.
SELECT * FROM Products
WHERE Category = 'Electronics';

# 1.3. Find the total number of orders placed.
SELECT * FROM Orders;
SELECT COUNT(*)AS NumberOfOrders FROM Orders;

# 1.4. Display the details of the most recent order.
SELECT * FROM Orders ORDER BY orderdate DESC LIMIT 1;

# 2. Joins and Relationships:
# 2.1. List all products along with the names of the customers who ordered them.
SELECT P.Name, C.Name
FROM Products P
JOIN OrderDetails OD ON P.ProductID = OD.ProductID
JOIN Orders O ON OD.OrderID = O.OrderID
JOIN Customers C ON O.CustomerID = C.CustomerID;

# 2.2. Show orders that include more than one product.
select o.orderid, count(od.orderid) From orders o, orderdetails od, products p
where o.orderid = od.orderid
and p.productid = od.productid
group by od.orderid having count(od.orderid)>1;

# 2.3. Find the total sales amount for each customer.
SELECT C.CustomerID, C.Name,
SUM(OD.quantity * P.Price) AS total_sales_amount
FROM Customers C
JOIN Orders O ON C.CustomerID = O.CustomerID
JOIN OrderDetails OD ON O.OrderID = OD.OrderID 
JOIN Products P ON OD.ProductID = P.ProductID 
GROUP BY C.CustomerID,C.Name;

# 3. Aggregation and Grouping:
# 3.1. Calculate the total revenue generated by each product category.
USE ORG;
USE ecommerce_sales_tables;
SELECT
    p.Category,
    SUM(od.Quantity * od.PricePerUnit) AS total_revenue
FROM
    Products p
JOIN
    OrderDetails od ON p.ProductID = od.ProductID
JOIN
    Orders o ON od.OrderID = o.OrderID
GROUP BY
    p.Category;

# 3.2. Determine the average order value.
SELECT AVG(OrderDetails.Quantity * Products.Price) AS Average_order_value
FROM Orders
JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID
JOIN Products ON OrderDetails.ProductID = Products.ProductID;

# 3.3. Find the month with the highest number of orders.
SELECT MONTH(O.Orderdate) AS Order_Month,
COUNT(OD.Quantity) AS Order_Count
FROM Orders O
Join OrderDetails OD ON O.OrderID = OD.Quantity
GROUP BY Order_Month
ORDER BY Order_Count DESC LIMIT 1;

# 4. Subqueries and Nested Queries:
# 4.1. Identify customers who have not placed any orders.
SELECT Customers.CustomerID, Customers.Name
FROM CUSTOMERS 
LEFT JOIN Orders ON Customers.CUstomerID = Orders.CustomerID
WHERE Orders.OrderID IS NULL;

# 4.2. Find products that have never been ordered.
SELECT Products.ProductID, Products.Name
FROM Products 
LEFT JOIN Orderdetails ON products.ProductID = Orderdetails.ProductID
WHERE OrderDetails.OrderID IS NULL;

# 4.3. Show the top 3 best-selling products.
SELECT P.ProductID, P.Name,
SUM(OD.quantity) AS total_quantity_sold
FROM Products P
JOIN OrderDetails OD ON P.ProductID = OD.ProductID
GROUP BY P.ProductID,P.Name
ORDER BY total_quantity_sold DESC LIMIT 3;

# 5. Date and Time Functions:
# 5.1. List orders placed in the last month.
SELECT
    o.OrderID,
    o.CustomerID,
    o.OrderDate,
    o.TotalAmount
FROM
    Orders o
WHERE
    o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
    AND o.OrderDate < CURDATE();
    
# 5.2. Determine the oldest customer in terms of membership duration.
SELECT CustomerID, Name, JoinDate
FROM  CUSTOMERS
ORDER BY JoinDate ASC LIMIT 1;

# 6. Advanced Queries:
# 6.1. Rank customers based on their total spending.
SELECT
    c.CustomerID,
    c.Name,
    c.Email,
    c.JoinDate,
    SUM(od.Quantity * p.Price) AS total_spending,
    RANK() OVER (ORDER BY SUM(od.Quantity * p.Price) DESC) AS spending_rank
FROM
    Customers c
JOIN
    Orders o ON c.CustomerID = o.CustomerID
JOIN
    OrderDetails od ON o.OrderID = od.OrderID
JOIN
    Products p ON od.ProductID = p.ProductID
GROUP BY
    c.CustomerID, c.Name, c.Email, c.JoinDate
ORDER BY
    spending_rank;
    
# 6.2. Identify the most popular product category.
WITH ProductCategorySales AS (
    SELECT
        p.Category,
        SUM(od.Quantity) AS TotalQuantitySold
    FROM
        Products p
        JOIN OrderDetails od ON p.ProductID = od.ProductID
        JOIN Orders o ON od.OrderID = o.OrderID
    GROUP BY
        p.Category
)
SELECT
    Category,
    TotalQuantitySold
FROM
    ProductCategorySales
ORDER BY
    TotalQuantitySold DESC
LIMIT 1;

# 6.3. Calculate the month-over-month growth rate in sales.
SELECT
    DATE_FORMAT(o1.OrderDate, '%Y-%m-01') AS Month,
    SUM(o1.TotalAmount) AS CurrentMonthTotal,
    LAG(SUM(o1.TotalAmount)) OVER (ORDER BY DATE_FORMAT(o1.OrderDate, '%Y-%m-01')) AS PreviousMonthTotal,
    SUM(o1.TotalAmount) - LAG(SUM(o1.TotalAmount)) OVER (ORDER BY DATE_FORMAT(o1.OrderDate, '%Y-%m-01')) AS MonthOverMonthChange
FROM
    Orders o1
GROUP BY
    DATE_FORMAT(o1.OrderDate, '%Y-%m-01')
ORDER BY
    Month;

# 7. Data Manipulation and Updates:
# 7.1. Add a new customer to the Customers table.
INSERT INTO Customers(CustomerID,Name,email,JoinDate)
VALUES (11,'Rahul Joseph','rahuljoseph@example.com','2023-08-15');
SELECT * FROM Customers;

# 7.2. Update the price of a specific product.
UPDATE Products
SET Price = 780.99
WHERE ProductID = 7;
SELECT * FROM Products;





